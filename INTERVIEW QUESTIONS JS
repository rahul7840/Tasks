//***************************************************************************************
                                  JS NATURE AND QUESTIONS
//**************************************************************************************


// let a = [10,1];

// let b =[20,10];

// console.log(a[0]==b[1])    //o/p => true 
// console.log(a[0]===b[0])   //o/p => false

 

// let c=10;

// let d= false

// console.log(c+d)  //o/p => 11

 

// let e =[1,2,3,4,5,6,7,8];

// let f ={ name:"rahul"}

// console.log(...e)  array distructuring

 

 

// let g= 10 - -10

// console.log(g)  // o/p 20

 

// const set =new Set([1,2,3,4,4,5,5,])

// console.log(set)

 

// let h={name:"rahul"}

// console.log(delete h)  if only h then false becoude var,let ,const cant be delete  but proprtties can when h.name then true output will be

 

// let i =["rahul","mehul","keyur","ganu"];

// let [...r]= i

// console.log(r)

 

// const info = { name: "rahul", age: 21, occupation: "backend engineer" };

// const detail = { email: 'ajdf@gmail.com', num: 7012983948 };

// var rrr = { ...info, ...detail };

// console.log(rrr); //merge 2 object

 

// const info = { name: "rahul", age: 21, occupation: "backend engineer" };

// const detail = { email: 'ajdf@gmail.com', num: 7012983948 };

// var rrr = { info, ...detail };

// console.log(rrr);  // o/p=> join both obj

 

// const result = null || {} || true

// console.log(result) // o/p will || take positive value first  thats means {} will i get

 

// if (false || true) {

//   console.log("i am true");

// } else {

//   console.log("i am false");

// } // o/p i m rahul



//**************************************************************************************
//**************************************************************************************



//--- javascript--for--of------
//dec:- also we can say this use to extrect from  {key:"value"} value from onj
//      but we *cant* directly extract value we need to Object.values(filedName) need to define
const arr=["one","two","tree","four"]
for(var num of arr){
console.log(num)
}
console.log("this is distructuring->",...arr)

    /*o/p--> 1> one
                two
                tree
                four
                this is distructuring-> one two tree four*/



//--- javascript--for--in------
//dec:- also we can say this use to extrect {key:"value"} key from onj
const number=["one","two","tree","four"]
for(var key in arr){
console.log(key +":"+ number[key])
}
    /*o/p--> 2>0:one
               1:two
               2:tree
               3:four*/




//using map for adding fild into object
const person =[{name:"rrr",lname:"patel"},{name:"jjj",lname:"nakr"}]

let newPerson = person.map(x=>{
  let newObj={};
  newObj["middlename"] = x.name + " " + x.lname;
  return newObj;
})

console.log(newPerson)




// convert string into array o/p['r','a','h'..]
const ss="rahul"
const rr=[...ss]
console.log(rr)



//--------classes in javascript---
//dec:- classes are a way to define reusable blueprints for creating objects with similar properties and behaviors
class gun{
    constructor(name,brand){
      this.name1=name,
      this.brand1=brand
    }
     guninfo(){
       console.log( `this gun name is ${this.name} and brand is
       ${this.brand}`)
      }  
  }
  const gun1= new gun("m24","apple")
 
  gun1.guninfo()




//**************************************************************************************
//**************************************************************************************




//1
// const aa = []||0|| true
// console.log(aa)
//o/p => []


//2
//console.log(Promise.resolve(5))
// return promise fullfield


//3
// const aa = '{"name":"rrr","age":20}'
// const str=JSON.parse(aa)
// console.log(str.name)
//JSON parse do json string to js JSON object


//4
// in let and const you need to declate first than accece 
// {both are block level scope }


//5
// const name = 'this is name '
// console.log(!typeof name === 'object')
// console.log(!typeof name === 'string')
//return false false litel deep flow ! -> ===


//6
// const name='this'
// const a=20
// console.log(isNaN(name))   //true
// console.log(isNaN(a))      //false


//7
// const person = {
//   name:"rahu",
//   age:21
// }
//  Object.seal(person)
//  console.log('this is first ->',person)
//  person.name = 'jane'
//  delete person.age;
//  console.log('this is sec->',person)
// when you object.seal then you can delete but you can update cannot add new prop



//8
// if you want to remove first element from array then use arr.shift()



//9
// const ty= "true";
// console.log(typeof !ty )
//using only ! this to in typeof so we can boolean force value



//10
//map and forEach diffrence is map allways return 

//MAP FUNCTION---
// const arr=[1,2,3,4]
// const maap = arr.map((arr)=>
//   arr*2
// )
// console.log(maap)

//FOREACH FUNCTION----
//const numbers = [11, 22, 33, 44, 55];
// numbers.forEach(function (number, index) {
//   console.log(`Element at index ${index}: ${number}`);
// });
// array.function(callback(cv,index,value){
//   //ations
// })



//11
// let data=['one','two','three']
// delete data[1];
// console.log(data)
//o/p -> [ 'one', <1 empty item>, 'three' ]



//12
// let c=3**3       //this is 3^3---> o/p 27
// console.log(c)



//13
// let a =2
// setTimeout(()=>{
//   console.log("1->",a)
// },0)
//  a=100;
// here code excute by top to down line by line and first a = 2 then its see setTimeout that place a side even if it has 0 secound then a= 100 and after this it will be consider setTime out that is why out put is  {1-.100}



//14
// const 10A ='like';
// const A10 = 'okey';
// console.log(10A)
// rule in js variable allways start with string 



//15
// let a= 1
// let b= 2
// console.log(++a === b)
// console.log(--a === b)
//this is increment and decriment oprators that means ++a will be 2 and --a will be 0 



//16
// let a=1
// let b=1
// let c=2
// console.log(a=== b=== --c)
// this will leads to backend so becouse first it will compare the a and b that will true and then it will compare true and  --c that will leads to false   coz compare bool and number so

//just like below
// let a = 1
// let b = true 
// console.log (a === b)  //o/p false



//17
// UNdefine ==> you have declare but not place the value
// NOTdefine ==> you havent declare and try to access



//18
// console.log([[[[[]]]]])
// this will be return the nestaed array 




//19
// for( var i=0; i<3;i++){
//   setTimeout(()=>console.log(i),1)
// }  // o/p---> 3 3 3

//when ever v use the settimeout or interval then js place this to diffrent stack and execute after the evry thing runs or after the seted time so what heppen here,,,
//first for loop execute untill condition false and then var i become 3 and after thissettiem execute and print the 333

// for( let i=0; i<3;i++){
//   setTimeout(()=>console.log(i),1)
// }  o/p 0 1 2 becouse of let that is block-scope



//20
// const a = +true
// console.log(typeof +true)
//when you add + infrond of any value that become number 




//===================== tcs interview Quetion ======================
// function calculateSel(job) {
//   var income = 5;
//   // Initial value of income is set to 5

//   if (job) {
//     var income = 50; 
//     // If job is truthy (e.g., true), income is set to 50
//   } else {
//     var income = 500; 
//     // If job is falsy (e.g., false), income is set to 500
//     {
//       var income = 5000; 
//       // This block is not executed as it is inside an invalid code 
         // block, so it has no effect
//     }
//   }

//   return income; // Return the value of income
// }

// console.log(calculateSel(true)); 
// // Call the function with true as the argument and log the result final ans will --> 50
